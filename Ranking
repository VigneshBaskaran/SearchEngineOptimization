import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;	
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import Jama.Matrix;

/*
 * Developed by Nima Goodarzi
 * Website: http://www.javadev.org
 * Email: nima@javadev.org
*/
public class Ranking {
          private final double DAMPING_FACTOR = 0.85;
private List params = new ArrayList();
//public static void main(String[] args) {
	/*
	 * 
	 * Solve the equation of ax=b, which : a is the generated matrix based on
	 * 
	 * the parameter constants. x is the page ranks matrix. b is a n*1 matrix
	 * 
	 * which all the values are equal to the damping factor.
	  */

public double rank(String pageId) {
	  generateParamList(pageId);
	 Matrix a = new Matrix(generateMatrix());
double[][] arrB = new double[params.size()][1];
for (int i = 0; i < params.size(); i++) {
arrB[i][0] = 1 - DAMPING_FACTOR;
}
Matrix b = new Matrix(arrB);
// Solve the equation and get the page ranks
Matrix x = a.solve(b);
int ind = 0;
int cnt = 0;
for (Iterator it = params.iterator(); it.hasNext();) {
String curPage = (String) it.next();
if (curPage.equals(pageId))
ind = cnt;
cnt++;
}
	double y=x.getArray()[ind][0];
	 return y;
	}
/* 
	 * This method generates the matrix of the linear equations. The generated
	 * matrix is a n*n matrix where n is number of the related pages.
	 */

	private double[][] generateMatrix() {
double[][] arr = new double[params.size()][params.size()];
for (int i = 0; i < params.size(); i++) {
for (int j = 0; j < params.size(); j++) {
arr[i][j] = getMultiFactor((String) params.get(i),
(String) params.get(j));
}
	}
	return arr;
	}

	/* 
	 * This method returns the constant of the given variable in the linear 
	 * equation. 
	 */

	private double getMultiFactor(String sourceId, String linkId) {
if (sourceId.equals(linkId))
return 1;
else {
String[] inc = getInboundLinks(sourceId);
for (int i = 0; i < inc.length; i++) {
if (inc[i].equals(linkId)) {
return -1
* (DAMPING_FACTOR / getOutboundLinks(linkId).length);
}
}}
	     return 0;
	}
/*
	 * This method returns list of the related pages. This list is also the
	 * parameters in the linear equation.
	 */
private void generateParamList(String pageId) {
// Add the starting page.
if (!params.contains(pageId))
params.add(pageId);
// Get list of the inbound pages
String[] inc = getInboundLinks(pageId);
// Add the inbound links to the params list and do same for inbound
// links
for (int i = 0; i < inc.length; i++) {
if (!params.contains(inc[i]))
generateParamList(inc[i]);
}
}

	/*
	 * Return list of the inbound links to a given page.
	 */
private String[] getInboundLinks(String pageId) {

		// This simulates a simple page collection
		Map map = new HashMap();
		map.put("2", new String[] { "1" });
		map.put("3", new String[] { "1" });
		map.put("4", new String[] { "1" });
		map.put("5", new String[] { "1" });
		map.put("6", new String[] { "2" });
		map.put("7", new String[] { "2" });
		map.put("8", new String[] { "2" });
		map.put("9", new String[] { "3" });
		map.put("10", new String[] { "4" });
map.put("11", new String[] { "4" });
		map.put("12", new String[] { "4" });
		map.put("13", new String[] { "5" });
		map.put("14", new String[] { "5" });
		map.put("15", new String[] { "5" });
		map.put("16", new String[] { "9" });
		map.put("1", new String[] { "15" });
map.put("11", new String[] { "14" });
		map.put("7", new String[] { "1" });
	/*map.put("4", new String[] { "1" });
		map.put("5", new String[] { "1" });
		map.put("5", new String[] { "2" });
		map.put("5", new String[] { "3" });
	map.put("7", new String[] { "5" });
		map.put("8", new String[] { "5" });
		map.put("6", new String[] { "3" });
		map.put("7", new String[] { "4" });*/
	return (String[]) map.get(pageId);
}

	/*
	 * Returns list of the outbound links from a page.
	 */
private String[] getOutboundLinks(String pageId) {
// This simulates a simple page collection
Map<String, String[]> map = new HashMap();
map.put("1", new String[] { "2", "3","4","5" });
map.put("2", new String[] { "6", "7" ,"8" });
map.put("3", new String[] { "9" });					map.put("4", new String[] { "10", "11" ,"12" });
		map.put("5", new String[] { "13", "14" ,"15" });
		map.put("9", new String[] {  "15" });
		map.put("15", new String[] { "1" });
		map.put("14", new String[] { "11" });
map.put("1", new String[] { "7" });
/*map.put("1", new String[] {  "4","5"});
		map.put("2", new String[] { "5" });
		map.put("3", new String[] { "5","6"});
		map.put("4", new String[] {  "7" });
		map.put("5", new String[] { "7","8"});
		map.put("6", new String[] { "8" });*/
return (String[]) map.get(pageId);
}

}


